{"meta":{"title":"小亭子","subtitle":"荣輝","description":"编码是一种态度","author":"Shi ronghui","url":"http://shironghui.github.io","root":"/"},"pages":[{"title":"关于","date":"2019-05-01T14:10:28.000Z","updated":"2019-05-14T02:59:21.000Z","comments":true,"path":"about/index.html","permalink":"http://shironghui.github.io/about/index.html","excerpt":"","text":"简介 13年毕业于南京信息工程大学软件工程专业 爱好PHP、Java、Python语言编码工作 资深猫奴 爱好 羽毛球 骑行 电影 理想 环游世界 世界和平"},{"title":"书单","date":"2019-05-14T08:01:25.000Z","updated":"2019-05-14T07:49:43.000Z","comments":false,"path":"books/index.html","permalink":"http://shironghui.github.io/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2019-05-14T08:27:27.000Z","updated":"2019-05-14T07:49:43.000Z","comments":false,"path":"categories/index.html","permalink":"http://shironghui.github.io/categories/index.html","excerpt":"","text":""},{"title":"留言","date":"2019-05-01T12:29:57.000Z","updated":"2019-05-09T09:54:55.000Z","comments":true,"path":"comment/index.html","permalink":"http://shironghui.github.io/comment/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2019-05-14T08:01:59.000Z","updated":"2019-05-14T07:49:43.000Z","comments":true,"path":"links/index.html","permalink":"http://shironghui.github.io/links/index.html","excerpt":"","text":""},{"title":"最新","date":"2016-02-01T12:29:57.000Z","updated":"2019-05-09T10:11:33.000Z","comments":true,"path":"lab/index.html","permalink":"http://shironghui.github.io/lab/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2019-05-14T08:01:39.000Z","updated":"2019-05-14T07:49:43.000Z","comments":false,"path":"repository/index.html","permalink":"http://shironghui.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-05-14T08:27:56.000Z","updated":"2019-05-14T07:49:43.000Z","comments":false,"path":"tags/index.html","permalink":"http://shironghui.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"编程思想 - OOP|AOP|SOA等术语的理解","slug":"编程思想","date":"2019-05-19T19:28:00.000Z","updated":"2019-05-25T04:26:07.000Z","comments":true,"path":"2019/05/20/编程思想/","link":"","permalink":"http://shironghui.github.io/2019/05/20/编程思想/","excerpt":"","text":"OOPOOP，全称：Object Oriented Programming 面向对象编程，是目前几乎所有主流编程语言都支持的编程方式，主要区别于古老的面向过程编程方式。 AOPAOP，全称：Aspect Oriented Programming 面向切面编程，最典型的应用就是Java Spring SOASOA，全称：Service-Oriented Architecture 面向服务的架构，我们经常所说的微服务就是应用了这种架构思想，但是SOA与微服务并不是同一概念。 是一种面向通用集成服务的、松耦合的架构实现方式，是web时代服务发展的产物； 使用”分层”理念，比传统的”观察者”模式更高级且更有优势，主要体现在易扩展性和可灾； 适用于大型复杂业务系统的数据共享。 下面是Web电商平台系统比较典型的例子（不全面，但可以帮助理解） 图中的服务平台可以用不同语言实现，一般大厂多用Java实现，初创公司更偏向于php、python等实现，原因你懂的，比较通用的是RESTFUL接口模式，对于user端，只需明确接口定义，既可以使用HTTP/HTTPS进行通讯，理论上是无限量的。 SOA对于客户端来说极大的简化了开发周期。对于一个特殊需求的出现不会措手不及，更不会大动干戈重构底层，开发者不需要知道具体底层原理即可快速开发实现功能。","categories":[{"name":"编程思想","slug":"编程思想","permalink":"http://shironghui.github.io/categories/编程思想/"}],"tags":[{"name":"编程思想","slug":"编程思想","permalink":"http://shironghui.github.io/tags/编程思想/"}],"author":"伺猫侠小灰灰"},{"title":"Python 基础知识","slug":"Python-基础知识","date":"2019-05-19T18:18:30.000Z","updated":"2019-05-25T04:25:32.000Z","comments":true,"path":"2019/05/20/Python-基础知识/","link":"","permalink":"http://shironghui.github.io/2019/05/20/Python-基础知识/","excerpt":"","text":"","categories":[{"name":"Python","slug":"Python","permalink":"http://shironghui.github.io/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://shironghui.github.io/tags/Python/"}],"author":"伺猫侠小灰灰"},{"title":"Java 类与对象","slug":"java-class","date":"2019-05-19T17:48:05.000Z","updated":"2019-05-25T04:25:32.000Z","comments":true,"path":"2019/05/20/java-class/","link":"","permalink":"http://shironghui.github.io/2019/05/20/java-class/","excerpt":"","text":"简单的讲，JAVA中的面向对象主要应用于类（class）在java中，类主要包括以下若干概念：常量、变量、构造函数、普通方法、析构函数，先简单介绍下基础，然后看一段Demo代码，看看你对java中的 类 理解如何 java关键字final用在变量的前面表示变量的值不可以改变，称为常量； 静态变量在内存中是共享的，与实例变量不同； 静态代码块在类加载时运行； 任何 Java 类都可以覆盖Object类提供的 protected 类型的 finalize() 方法作为析构方法，析构方法与构造方法相反，当对象销毁时自动执行。 12345678910111213141516171819202122232425262728package com.company.ronghui.shi;public class Counter &#123; private static int number = 0; Counter() &#123; init(); number++; &#125; static &#123; number++; &#125; private void init() &#123; number++; &#125; public int getCount() &#123; return number; &#125; protected void finalize() &#123; number--; System.out.println(\"Final number: \" + number); &#125;&#125; 12345678910111213141516package com.company.ronghui.shi;import java.lang.String;public class Main&#123; public static void main(String args[]) &#123; run(); Runtime.getRuntime().gc(); &#125; private static void run() &#123; for (int i = 1; i &lt;= 3; i++) &#123; System.out.println((new Counter()).getCount()); &#125; &#125; 正确答案123456357Final number: 6Final number: 5Final number: 4","categories":[{"name":"Java","slug":"Java","permalink":"http://shironghui.github.io/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://shironghui.github.io/tags/Java/"}],"author":"伺猫侠小灰灰"},{"title":"PHP 基础知识","slug":"PHP-基础知识","date":"2019-05-19T17:30:00.000Z","updated":"2019-05-25T04:25:32.000Z","comments":true,"path":"2019/05/20/PHP-基础知识/","link":"","permalink":"http://shironghui.github.io/2019/05/20/PHP-基础知识/","excerpt":"","text":"主流框架 入门学习框架：ThinkPHP 主流高端框架：Laravel, Yii, CI, Zend Framework 其他特色框架：Symfony, Phalcon, CakePHP等","categories":[{"name":"PHP","slug":"PHP","permalink":"http://shironghui.github.io/categories/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://shironghui.github.io/tags/PHP/"}],"author":"伺猫侠小灰灰"},{"title":"Redis 高可用设计方案","slug":"Redis高可用系统架构设计思路","date":"2019-05-19T17:08:05.000Z","updated":"2019-05-25T04:25:45.000Z","comments":true,"path":"2019/05/20/Redis高可用系统架构设计思路/","link":"","permalink":"http://shironghui.github.io/2019/05/20/Redis高可用系统架构设计思路/","excerpt":"","text":"先介绍几个概念知识，为整体架构作铺垫 Codis 分布式服务框架 Twemproxy 代理服务器 首先，最简单的Redis应用称为单点模式：即只有一台Redis服务器与客户端直连。 当QPS不断增加，单点Redis不足以支撑业务的时候，就是最应该优化的时候，毕竟业务驱动技术改进，脱离业务的技术改造都是耍流氓，这话出自业内某位大神，但是真不是鲁迅先生，哈哈。此时，我们想到的是加一台服务器作为从库，实现读写分离。但是如果业务场景出现频繁读数据或频繁写数据，那么此时和单点模式基本相同，此时我们有两种方式可以优化系统： 我们可以充分利用两台服务器实现双写双读模式，此时需要开发进行大量的编码工作，以保障双写双读的可靠性。 如果想对服务器内存有更大的需求，可以考虑分片，具体实现何种分片还要具体问题具体分析。 对于上面的方案，我们基本完成了一次系统优化迭代。优势显而易见：代码独立，不依赖于第三方中间件等，但是更明显的应该是缺点： 系统整体升级困难 扩缩容非常复杂 突发性故障屏蔽转移需要很大的人力成本 坦白的说，只要你稍微思考的远一些，站的角度高一些，你会发现上面的系统是最初级的，有很大的优化空间，而且现在的技术发展可以很好的解决以上问题，那就是代理模式。 Redis代理方案说到代理中间件，就用到了一开始简单的介绍的Codis和Twemproxy。 但是代理也不是完美无缺，比如多多少少会影响一些性能，需要购买多余的机器等问题。 Redis Cluster这是Redis.io官方推荐的高可用Redis集群解决方案，采用去中心化思想，这点估计是借鉴了区块链技术中的无中心化思想吧（在下YY的，忽略），方便管理增删服务节点，很重要的一点是文档丰富、生态良好~","categories":[{"name":"Redis","slug":"Redis","permalink":"http://shironghui.github.io/categories/Redis/"}],"tags":[{"name":"Redis","slug":"Redis","permalink":"http://shironghui.github.io/tags/Redis/"}],"author":"伺猫侠小灰灰"},{"title":"Redis 命令手册","slug":"Redis常用命令手册","date":"2019-05-19T16:48:05.000Z","updated":"2019-05-25T04:35:22.000Z","comments":true,"path":"2019/05/20/Redis常用命令手册/","link":"","permalink":"http://shironghui.github.io/2019/05/20/Redis常用命令手册/","excerpt":"","text":"GET key查询key对应的值value； SET key value [有效期（可选参数）]设置key的值value，如果key已经存在，则覆盖原有的值； INCR key将key对应的数值加1，如果key不存在，则默认在0的基础上加1，返回1； DECR key将key对应的数值减1，如果key不存在，则默认在0的基础上减1，返回-1； EXISTS key [key2 key3 …]用途：判断key是否存在，目前已支持查询多个key是否存在；返回：单个key不存在时返回0，存在时返回存在的key的数量，如1，2，3； EXPIRE key xxx（秒数）将key的超时时间设置为xxx,单位秒；","categories":[{"name":"Redis","slug":"Redis","permalink":"http://shironghui.github.io/categories/Redis/"}],"tags":[{"name":"Redis","slug":"Redis","permalink":"http://shironghui.github.io/tags/Redis/"}],"author":"伺猫侠小灰灰"}]}